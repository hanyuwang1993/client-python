# coding: utf-8

"""
    grafeas.proto

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: version not set
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class AttestationAttestation(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'pgp_signed_attestation': 'AttestationPgpSignedAttestation',
        'generic_signed_attestation': 'AttestationGenericSignedAttestation'
    }

    attribute_map = {
        'pgp_signed_attestation': 'pgpSignedAttestation',
        'generic_signed_attestation': 'genericSignedAttestation'
    }

    def __init__(self, pgp_signed_attestation=None, generic_signed_attestation=None):  # noqa: E501
        """AttestationAttestation - a model defined in Swagger"""  # noqa: E501

        self._pgp_signed_attestation = None
        self._generic_signed_attestation = None
        self.discriminator = None

        if pgp_signed_attestation is not None:
            self.pgp_signed_attestation = pgp_signed_attestation
        if generic_signed_attestation is not None:
            self.generic_signed_attestation = generic_signed_attestation

    @property
    def pgp_signed_attestation(self):
        """Gets the pgp_signed_attestation of this AttestationAttestation.  # noqa: E501

        A PGP signed attestation.  # noqa: E501

        :return: The pgp_signed_attestation of this AttestationAttestation.  # noqa: E501
        :rtype: AttestationPgpSignedAttestation
        """
        return self._pgp_signed_attestation

    @pgp_signed_attestation.setter
    def pgp_signed_attestation(self, pgp_signed_attestation):
        """Sets the pgp_signed_attestation of this AttestationAttestation.

        A PGP signed attestation.  # noqa: E501

        :param pgp_signed_attestation: The pgp_signed_attestation of this AttestationAttestation.  # noqa: E501
        :type: AttestationPgpSignedAttestation
        """

        self._pgp_signed_attestation = pgp_signed_attestation

    @property
    def generic_signed_attestation(self):
        """Gets the generic_signed_attestation of this AttestationAttestation.  # noqa: E501

        An attestation that supports multiple `Signature`s over the same attestation payload. The signatures (defined in common.proto) support a superset of public key types and IDs compared to PgpSignedAttestation.  # noqa: E501

        :return: The generic_signed_attestation of this AttestationAttestation.  # noqa: E501
        :rtype: AttestationGenericSignedAttestation
        """
        return self._generic_signed_attestation

    @generic_signed_attestation.setter
    def generic_signed_attestation(self, generic_signed_attestation):
        """Sets the generic_signed_attestation of this AttestationAttestation.

        An attestation that supports multiple `Signature`s over the same attestation payload. The signatures (defined in common.proto) support a superset of public key types and IDs compared to PgpSignedAttestation.  # noqa: E501

        :param generic_signed_attestation: The generic_signed_attestation of this AttestationAttestation.  # noqa: E501
        :type: AttestationGenericSignedAttestation
        """

        self._generic_signed_attestation = generic_signed_attestation

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(AttestationAttestation, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AttestationAttestation):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
