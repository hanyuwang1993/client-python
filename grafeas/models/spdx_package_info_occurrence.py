# coding: utf-8

"""
    grafeas.proto

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: version not set
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class SpdxPackageInfoOccurrence(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'filename': 'str',
        'source_info': 'str',
        'license_concluded': 'SpdxLicense',
        'comment': 'str',
        'package_type': 'str',
        'title': 'str',
        'version': 'str',
        'home_page': 'str',
        'summary_description': 'str'
    }

    attribute_map = {
        'id': 'id',
        'filename': 'filename',
        'source_info': 'sourceInfo',
        'license_concluded': 'licenseConcluded',
        'comment': 'comment',
        'package_type': 'packageType',
        'title': 'title',
        'version': 'version',
        'home_page': 'homePage',
        'summary_description': 'summaryDescription'
    }

    def __init__(self, id=None, filename=None, source_info=None, license_concluded=None, comment=None, package_type=None, title=None, version=None, home_page=None, summary_description=None):  # noqa: E501
        """SpdxPackageInfoOccurrence - a model defined in Swagger"""  # noqa: E501

        self._id = None
        self._filename = None
        self._source_info = None
        self._license_concluded = None
        self._comment = None
        self._package_type = None
        self._title = None
        self._version = None
        self._home_page = None
        self._summary_description = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if filename is not None:
            self.filename = filename
        if source_info is not None:
            self.source_info = source_info
        if license_concluded is not None:
            self.license_concluded = license_concluded
        if comment is not None:
            self.comment = comment
        if package_type is not None:
            self.package_type = package_type
        if title is not None:
            self.title = title
        if version is not None:
            self.version = version
        if home_page is not None:
            self.home_page = home_page
        if summary_description is not None:
            self.summary_description = summary_description

    @property
    def id(self):
        """Gets the id of this SpdxPackageInfoOccurrence.  # noqa: E501


        :return: The id of this SpdxPackageInfoOccurrence.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this SpdxPackageInfoOccurrence.


        :param id: The id of this SpdxPackageInfoOccurrence.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def filename(self):
        """Gets the filename of this SpdxPackageInfoOccurrence.  # noqa: E501


        :return: The filename of this SpdxPackageInfoOccurrence.  # noqa: E501
        :rtype: str
        """
        return self._filename

    @filename.setter
    def filename(self, filename):
        """Sets the filename of this SpdxPackageInfoOccurrence.


        :param filename: The filename of this SpdxPackageInfoOccurrence.  # noqa: E501
        :type: str
        """

        self._filename = filename

    @property
    def source_info(self):
        """Gets the source_info of this SpdxPackageInfoOccurrence.  # noqa: E501


        :return: The source_info of this SpdxPackageInfoOccurrence.  # noqa: E501
        :rtype: str
        """
        return self._source_info

    @source_info.setter
    def source_info(self, source_info):
        """Sets the source_info of this SpdxPackageInfoOccurrence.


        :param source_info: The source_info of this SpdxPackageInfoOccurrence.  # noqa: E501
        :type: str
        """

        self._source_info = source_info

    @property
    def license_concluded(self):
        """Gets the license_concluded of this SpdxPackageInfoOccurrence.  # noqa: E501


        :return: The license_concluded of this SpdxPackageInfoOccurrence.  # noqa: E501
        :rtype: SpdxLicense
        """
        return self._license_concluded

    @license_concluded.setter
    def license_concluded(self, license_concluded):
        """Sets the license_concluded of this SpdxPackageInfoOccurrence.


        :param license_concluded: The license_concluded of this SpdxPackageInfoOccurrence.  # noqa: E501
        :type: SpdxLicense
        """

        self._license_concluded = license_concluded

    @property
    def comment(self):
        """Gets the comment of this SpdxPackageInfoOccurrence.  # noqa: E501


        :return: The comment of this SpdxPackageInfoOccurrence.  # noqa: E501
        :rtype: str
        """
        return self._comment

    @comment.setter
    def comment(self, comment):
        """Sets the comment of this SpdxPackageInfoOccurrence.


        :param comment: The comment of this SpdxPackageInfoOccurrence.  # noqa: E501
        :type: str
        """

        self._comment = comment

    @property
    def package_type(self):
        """Gets the package_type of this SpdxPackageInfoOccurrence.  # noqa: E501

        The type of package: OS, MAVEN, GO, GO_STDLIB, etc.  # noqa: E501

        :return: The package_type of this SpdxPackageInfoOccurrence.  # noqa: E501
        :rtype: str
        """
        return self._package_type

    @package_type.setter
    def package_type(self, package_type):
        """Sets the package_type of this SpdxPackageInfoOccurrence.

        The type of package: OS, MAVEN, GO, GO_STDLIB, etc.  # noqa: E501

        :param package_type: The package_type of this SpdxPackageInfoOccurrence.  # noqa: E501
        :type: str
        """

        self._package_type = package_type

    @property
    def title(self):
        """Gets the title of this SpdxPackageInfoOccurrence.  # noqa: E501


        :return: The title of this SpdxPackageInfoOccurrence.  # noqa: E501
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this SpdxPackageInfoOccurrence.


        :param title: The title of this SpdxPackageInfoOccurrence.  # noqa: E501
        :type: str
        """

        self._title = title

    @property
    def version(self):
        """Gets the version of this SpdxPackageInfoOccurrence.  # noqa: E501


        :return: The version of this SpdxPackageInfoOccurrence.  # noqa: E501
        :rtype: str
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this SpdxPackageInfoOccurrence.


        :param version: The version of this SpdxPackageInfoOccurrence.  # noqa: E501
        :type: str
        """

        self._version = version

    @property
    def home_page(self):
        """Gets the home_page of this SpdxPackageInfoOccurrence.  # noqa: E501


        :return: The home_page of this SpdxPackageInfoOccurrence.  # noqa: E501
        :rtype: str
        """
        return self._home_page

    @home_page.setter
    def home_page(self, home_page):
        """Sets the home_page of this SpdxPackageInfoOccurrence.


        :param home_page: The home_page of this SpdxPackageInfoOccurrence.  # noqa: E501
        :type: str
        """

        self._home_page = home_page

    @property
    def summary_description(self):
        """Gets the summary_description of this SpdxPackageInfoOccurrence.  # noqa: E501


        :return: The summary_description of this SpdxPackageInfoOccurrence.  # noqa: E501
        :rtype: str
        """
        return self._summary_description

    @summary_description.setter
    def summary_description(self, summary_description):
        """Sets the summary_description of this SpdxPackageInfoOccurrence.


        :param summary_description: The summary_description of this SpdxPackageInfoOccurrence.  # noqa: E501
        :type: str
        """

        self._summary_description = summary_description

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(SpdxPackageInfoOccurrence, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SpdxPackageInfoOccurrence):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
