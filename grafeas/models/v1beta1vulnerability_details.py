# coding: utf-8

"""
    grafeas.proto

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: version not set
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class V1beta1vulnerabilityDetails(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'type': 'str',
        'severity': 'VulnerabilitySeverity',
        'cvss_score': 'float',
        'package_issue': 'list[VulnerabilityPackageIssue]',
        'short_description': 'str',
        'long_description': 'str',
        'related_urls': 'list[V1beta1RelatedUrl]',
        'effective_severity': 'VulnerabilitySeverity'
    }

    attribute_map = {
        'type': 'type',
        'severity': 'severity',
        'cvss_score': 'cvssScore',
        'package_issue': 'packageIssue',
        'short_description': 'shortDescription',
        'long_description': 'longDescription',
        'related_urls': 'relatedUrls',
        'effective_severity': 'effectiveSeverity'
    }

    def __init__(self, type=None, severity=None, cvss_score=None, package_issue=None, short_description=None, long_description=None, related_urls=None, effective_severity=None):  # noqa: E501
        """V1beta1vulnerabilityDetails - a model defined in Swagger"""  # noqa: E501

        self._type = None
        self._severity = None
        self._cvss_score = None
        self._package_issue = None
        self._short_description = None
        self._long_description = None
        self._related_urls = None
        self._effective_severity = None
        self.discriminator = None

        if type is not None:
            self.type = type
        if severity is not None:
            self.severity = severity
        if cvss_score is not None:
            self.cvss_score = cvss_score
        if package_issue is not None:
            self.package_issue = package_issue
        if short_description is not None:
            self.short_description = short_description
        if long_description is not None:
            self.long_description = long_description
        if related_urls is not None:
            self.related_urls = related_urls
        if effective_severity is not None:
            self.effective_severity = effective_severity

    @property
    def type(self):
        """Gets the type of this V1beta1vulnerabilityDetails.  # noqa: E501


        :return: The type of this V1beta1vulnerabilityDetails.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this V1beta1vulnerabilityDetails.


        :param type: The type of this V1beta1vulnerabilityDetails.  # noqa: E501
        :type: str
        """

        self._type = type

    @property
    def severity(self):
        """Gets the severity of this V1beta1vulnerabilityDetails.  # noqa: E501

        Output only. The note provider assigned Severity of the vulnerability.  # noqa: E501

        :return: The severity of this V1beta1vulnerabilityDetails.  # noqa: E501
        :rtype: VulnerabilitySeverity
        """
        return self._severity

    @severity.setter
    def severity(self, severity):
        """Sets the severity of this V1beta1vulnerabilityDetails.

        Output only. The note provider assigned Severity of the vulnerability.  # noqa: E501

        :param severity: The severity of this V1beta1vulnerabilityDetails.  # noqa: E501
        :type: VulnerabilitySeverity
        """

        self._severity = severity

    @property
    def cvss_score(self):
        """Gets the cvss_score of this V1beta1vulnerabilityDetails.  # noqa: E501

        Output only. The CVSS score of this vulnerability. CVSS score is on a scale of 0-10 where 0 indicates low severity and 10 indicates high severity.  # noqa: E501

        :return: The cvss_score of this V1beta1vulnerabilityDetails.  # noqa: E501
        :rtype: float
        """
        return self._cvss_score

    @cvss_score.setter
    def cvss_score(self, cvss_score):
        """Sets the cvss_score of this V1beta1vulnerabilityDetails.

        Output only. The CVSS score of this vulnerability. CVSS score is on a scale of 0-10 where 0 indicates low severity and 10 indicates high severity.  # noqa: E501

        :param cvss_score: The cvss_score of this V1beta1vulnerabilityDetails.  # noqa: E501
        :type: float
        """

        self._cvss_score = cvss_score

    @property
    def package_issue(self):
        """Gets the package_issue of this V1beta1vulnerabilityDetails.  # noqa: E501

        Required. The set of affected locations and their fixes (if available) within the associated resource.  # noqa: E501

        :return: The package_issue of this V1beta1vulnerabilityDetails.  # noqa: E501
        :rtype: list[VulnerabilityPackageIssue]
        """
        return self._package_issue

    @package_issue.setter
    def package_issue(self, package_issue):
        """Sets the package_issue of this V1beta1vulnerabilityDetails.

        Required. The set of affected locations and their fixes (if available) within the associated resource.  # noqa: E501

        :param package_issue: The package_issue of this V1beta1vulnerabilityDetails.  # noqa: E501
        :type: list[VulnerabilityPackageIssue]
        """

        self._package_issue = package_issue

    @property
    def short_description(self):
        """Gets the short_description of this V1beta1vulnerabilityDetails.  # noqa: E501

        Output only. A one sentence description of this vulnerability.  # noqa: E501

        :return: The short_description of this V1beta1vulnerabilityDetails.  # noqa: E501
        :rtype: str
        """
        return self._short_description

    @short_description.setter
    def short_description(self, short_description):
        """Sets the short_description of this V1beta1vulnerabilityDetails.

        Output only. A one sentence description of this vulnerability.  # noqa: E501

        :param short_description: The short_description of this V1beta1vulnerabilityDetails.  # noqa: E501
        :type: str
        """

        self._short_description = short_description

    @property
    def long_description(self):
        """Gets the long_description of this V1beta1vulnerabilityDetails.  # noqa: E501

        Output only. A detailed description of this vulnerability.  # noqa: E501

        :return: The long_description of this V1beta1vulnerabilityDetails.  # noqa: E501
        :rtype: str
        """
        return self._long_description

    @long_description.setter
    def long_description(self, long_description):
        """Sets the long_description of this V1beta1vulnerabilityDetails.

        Output only. A detailed description of this vulnerability.  # noqa: E501

        :param long_description: The long_description of this V1beta1vulnerabilityDetails.  # noqa: E501
        :type: str
        """

        self._long_description = long_description

    @property
    def related_urls(self):
        """Gets the related_urls of this V1beta1vulnerabilityDetails.  # noqa: E501

        Output only. URLs related to this vulnerability.  # noqa: E501

        :return: The related_urls of this V1beta1vulnerabilityDetails.  # noqa: E501
        :rtype: list[V1beta1RelatedUrl]
        """
        return self._related_urls

    @related_urls.setter
    def related_urls(self, related_urls):
        """Sets the related_urls of this V1beta1vulnerabilityDetails.

        Output only. URLs related to this vulnerability.  # noqa: E501

        :param related_urls: The related_urls of this V1beta1vulnerabilityDetails.  # noqa: E501
        :type: list[V1beta1RelatedUrl]
        """

        self._related_urls = related_urls

    @property
    def effective_severity(self):
        """Gets the effective_severity of this V1beta1vulnerabilityDetails.  # noqa: E501

        The distro assigned severity for this vulnerability when it is available, and note provider assigned severity when distro has not yet assigned a severity for this vulnerability.  When there are multiple PackageIssues for this vulnerability, they can have different effective severities because some might be provided by the distro while others are provided by the language ecosystem for a language pack. For this reason, it is advised to use the effective severity on the PackageIssue level. In the case where multiple PackageIssues have differing effective severities, this field should be the highest severity for any of the PackageIssues.  # noqa: E501

        :return: The effective_severity of this V1beta1vulnerabilityDetails.  # noqa: E501
        :rtype: VulnerabilitySeverity
        """
        return self._effective_severity

    @effective_severity.setter
    def effective_severity(self, effective_severity):
        """Sets the effective_severity of this V1beta1vulnerabilityDetails.

        The distro assigned severity for this vulnerability when it is available, and note provider assigned severity when distro has not yet assigned a severity for this vulnerability.  When there are multiple PackageIssues for this vulnerability, they can have different effective severities because some might be provided by the distro while others are provided by the language ecosystem for a language pack. For this reason, it is advised to use the effective severity on the PackageIssue level. In the case where multiple PackageIssues have differing effective severities, this field should be the highest severity for any of the PackageIssues.  # noqa: E501

        :param effective_severity: The effective_severity of this V1beta1vulnerabilityDetails.  # noqa: E501
        :type: VulnerabilitySeverity
        """

        self._effective_severity = effective_severity

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(V1beta1vulnerabilityDetails, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, V1beta1vulnerabilityDetails):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
