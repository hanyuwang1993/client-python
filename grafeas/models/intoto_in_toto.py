# coding: utf-8

"""
    grafeas.proto

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: version not set
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class IntotoInToto(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'step_name': 'str',
        'signing_keys': 'list[IntotoSigningKey]',
        'expected_materials': 'list[InTotoArtifactRule]',
        'expected_products': 'list[InTotoArtifactRule]',
        'expected_command': 'list[str]',
        'threshold': 'str'
    }

    attribute_map = {
        'step_name': 'stepName',
        'signing_keys': 'signingKeys',
        'expected_materials': 'expectedMaterials',
        'expected_products': 'expectedProducts',
        'expected_command': 'expectedCommand',
        'threshold': 'threshold'
    }

    def __init__(self, step_name=None, signing_keys=None, expected_materials=None, expected_products=None, expected_command=None, threshold=None):  # noqa: E501
        """IntotoInToto - a model defined in Swagger"""  # noqa: E501

        self._step_name = None
        self._signing_keys = None
        self._expected_materials = None
        self._expected_products = None
        self._expected_command = None
        self._threshold = None
        self.discriminator = None

        if step_name is not None:
            self.step_name = step_name
        if signing_keys is not None:
            self.signing_keys = signing_keys
        if expected_materials is not None:
            self.expected_materials = expected_materials
        if expected_products is not None:
            self.expected_products = expected_products
        if expected_command is not None:
            self.expected_command = expected_command
        if threshold is not None:
            self.threshold = threshold

    @property
    def step_name(self):
        """Gets the step_name of this IntotoInToto.  # noqa: E501

        This field identifies the name of the step in the supply chain.  # noqa: E501

        :return: The step_name of this IntotoInToto.  # noqa: E501
        :rtype: str
        """
        return self._step_name

    @step_name.setter
    def step_name(self, step_name):
        """Sets the step_name of this IntotoInToto.

        This field identifies the name of the step in the supply chain.  # noqa: E501

        :param step_name: The step_name of this IntotoInToto.  # noqa: E501
        :type: str
        """

        self._step_name = step_name

    @property
    def signing_keys(self):
        """Gets the signing_keys of this IntotoInToto.  # noqa: E501

        This field contains the public keys that can be used to verify the signatures on the step metadata.  # noqa: E501

        :return: The signing_keys of this IntotoInToto.  # noqa: E501
        :rtype: list[IntotoSigningKey]
        """
        return self._signing_keys

    @signing_keys.setter
    def signing_keys(self, signing_keys):
        """Sets the signing_keys of this IntotoInToto.

        This field contains the public keys that can be used to verify the signatures on the step metadata.  # noqa: E501

        :param signing_keys: The signing_keys of this IntotoInToto.  # noqa: E501
        :type: list[IntotoSigningKey]
        """

        self._signing_keys = signing_keys

    @property
    def expected_materials(self):
        """Gets the expected_materials of this IntotoInToto.  # noqa: E501

        The following fields contain in-toto artifact rules identifying the artifacts that enter this supply chain step, and exit the supply chain step, i.e. materials and products of the step.  # noqa: E501

        :return: The expected_materials of this IntotoInToto.  # noqa: E501
        :rtype: list[InTotoArtifactRule]
        """
        return self._expected_materials

    @expected_materials.setter
    def expected_materials(self, expected_materials):
        """Sets the expected_materials of this IntotoInToto.

        The following fields contain in-toto artifact rules identifying the artifacts that enter this supply chain step, and exit the supply chain step, i.e. materials and products of the step.  # noqa: E501

        :param expected_materials: The expected_materials of this IntotoInToto.  # noqa: E501
        :type: list[InTotoArtifactRule]
        """

        self._expected_materials = expected_materials

    @property
    def expected_products(self):
        """Gets the expected_products of this IntotoInToto.  # noqa: E501


        :return: The expected_products of this IntotoInToto.  # noqa: E501
        :rtype: list[InTotoArtifactRule]
        """
        return self._expected_products

    @expected_products.setter
    def expected_products(self, expected_products):
        """Sets the expected_products of this IntotoInToto.


        :param expected_products: The expected_products of this IntotoInToto.  # noqa: E501
        :type: list[InTotoArtifactRule]
        """

        self._expected_products = expected_products

    @property
    def expected_command(self):
        """Gets the expected_command of this IntotoInToto.  # noqa: E501

        This field contains the expected command used to perform the step.  # noqa: E501

        :return: The expected_command of this IntotoInToto.  # noqa: E501
        :rtype: list[str]
        """
        return self._expected_command

    @expected_command.setter
    def expected_command(self, expected_command):
        """Sets the expected_command of this IntotoInToto.

        This field contains the expected command used to perform the step.  # noqa: E501

        :param expected_command: The expected_command of this IntotoInToto.  # noqa: E501
        :type: list[str]
        """

        self._expected_command = expected_command

    @property
    def threshold(self):
        """Gets the threshold of this IntotoInToto.  # noqa: E501

        This field contains a value that indicates the minimum number of keys that need to be used to sign the step's in-toto link.  # noqa: E501

        :return: The threshold of this IntotoInToto.  # noqa: E501
        :rtype: str
        """
        return self._threshold

    @threshold.setter
    def threshold(self, threshold):
        """Sets the threshold of this IntotoInToto.

        This field contains a value that indicates the minimum number of keys that need to be used to sign the step's in-toto link.  # noqa: E501

        :param threshold: The threshold of this IntotoInToto.  # noqa: E501
        :type: str
        """

        self._threshold = threshold

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(IntotoInToto, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, IntotoInToto):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
