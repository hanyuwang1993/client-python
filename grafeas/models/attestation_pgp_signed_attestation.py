# coding: utf-8

"""
    grafeas.proto

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: version not set
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class AttestationPgpSignedAttestation(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'signature': 'str',
        'content_type': 'AttestationPgpSignedAttestationContentType',
        'pgp_key_id': 'str'
    }

    attribute_map = {
        'signature': 'signature',
        'content_type': 'contentType',
        'pgp_key_id': 'pgpKeyId'
    }

    def __init__(self, signature=None, content_type=None, pgp_key_id=None):  # noqa: E501
        """AttestationPgpSignedAttestation - a model defined in Swagger"""  # noqa: E501

        self._signature = None
        self._content_type = None
        self._pgp_key_id = None
        self.discriminator = None

        if signature is not None:
            self.signature = signature
        if content_type is not None:
            self.content_type = content_type
        if pgp_key_id is not None:
            self.pgp_key_id = pgp_key_id

    @property
    def signature(self):
        """Gets the signature of this AttestationPgpSignedAttestation.  # noqa: E501

        Required. The raw content of the signature, as output by GNU Privacy Guard (GPG) or equivalent. Since this message only supports attached signatures, the payload that was signed must be attached. While the signature format supported is dependent on the verification implementation, currently only ASCII-armored (`--armor` to gpg), non-clearsigned (`--sign` rather than `--clearsign` to gpg) are supported. Concretely, `gpg --sign --armor --output=signature.gpg payload.json` will create the signature content expected in this field in `signature.gpg` for the `payload.json` attestation payload.  # noqa: E501

        :return: The signature of this AttestationPgpSignedAttestation.  # noqa: E501
        :rtype: str
        """
        return self._signature

    @signature.setter
    def signature(self, signature):
        """Sets the signature of this AttestationPgpSignedAttestation.

        Required. The raw content of the signature, as output by GNU Privacy Guard (GPG) or equivalent. Since this message only supports attached signatures, the payload that was signed must be attached. While the signature format supported is dependent on the verification implementation, currently only ASCII-armored (`--armor` to gpg), non-clearsigned (`--sign` rather than `--clearsign` to gpg) are supported. Concretely, `gpg --sign --armor --output=signature.gpg payload.json` will create the signature content expected in this field in `signature.gpg` for the `payload.json` attestation payload.  # noqa: E501

        :param signature: The signature of this AttestationPgpSignedAttestation.  # noqa: E501
        :type: str
        """

        self._signature = signature

    @property
    def content_type(self):
        """Gets the content_type of this AttestationPgpSignedAttestation.  # noqa: E501

        Type (for example schema) of the attestation payload that was signed. The verifier must ensure that the provided type is one that the verifier supports, and that the attestation payload is a valid instantiation of that type (for example by validating a JSON schema).  # noqa: E501

        :return: The content_type of this AttestationPgpSignedAttestation.  # noqa: E501
        :rtype: AttestationPgpSignedAttestationContentType
        """
        return self._content_type

    @content_type.setter
    def content_type(self, content_type):
        """Sets the content_type of this AttestationPgpSignedAttestation.

        Type (for example schema) of the attestation payload that was signed. The verifier must ensure that the provided type is one that the verifier supports, and that the attestation payload is a valid instantiation of that type (for example by validating a JSON schema).  # noqa: E501

        :param content_type: The content_type of this AttestationPgpSignedAttestation.  # noqa: E501
        :type: AttestationPgpSignedAttestationContentType
        """

        self._content_type = content_type

    @property
    def pgp_key_id(self):
        """Gets the pgp_key_id of this AttestationPgpSignedAttestation.  # noqa: E501

        The cryptographic fingerprint of the key used to generate the signature, as output by, e.g. `gpg --list-keys`. This should be the version 4, full 160-bit fingerprint, expressed as a 40 character hexadecimal string. See https://tools.ietf.org/html/rfc4880#section-12.2 for details. Implementations may choose to acknowledge \"LONG\", \"SHORT\", or other abbreviated key IDs, but only the full fingerprint is guaranteed to work. In gpg, the full fingerprint can be retrieved from the `fpr` field returned when calling --list-keys with --with-colons.  For example: ``` gpg --with-colons --with-fingerprint --force-v4-certs \\     --list-keys attester@example.com tru::1:1513631572:0:3:1:5 pub:...<SNIP>... fpr:::::::::24FF6481B76AC91E66A00AC657A93A81EF3AE6FB: ``` Above, the fingerprint is `24FF6481B76AC91E66A00AC657A93A81EF3AE6FB`.  # noqa: E501

        :return: The pgp_key_id of this AttestationPgpSignedAttestation.  # noqa: E501
        :rtype: str
        """
        return self._pgp_key_id

    @pgp_key_id.setter
    def pgp_key_id(self, pgp_key_id):
        """Sets the pgp_key_id of this AttestationPgpSignedAttestation.

        The cryptographic fingerprint of the key used to generate the signature, as output by, e.g. `gpg --list-keys`. This should be the version 4, full 160-bit fingerprint, expressed as a 40 character hexadecimal string. See https://tools.ietf.org/html/rfc4880#section-12.2 for details. Implementations may choose to acknowledge \"LONG\", \"SHORT\", or other abbreviated key IDs, but only the full fingerprint is guaranteed to work. In gpg, the full fingerprint can be retrieved from the `fpr` field returned when calling --list-keys with --with-colons.  For example: ``` gpg --with-colons --with-fingerprint --force-v4-certs \\     --list-keys attester@example.com tru::1:1513631572:0:3:1:5 pub:...<SNIP>... fpr:::::::::24FF6481B76AC91E66A00AC657A93A81EF3AE6FB: ``` Above, the fingerprint is `24FF6481B76AC91E66A00AC657A93A81EF3AE6FB`.  # noqa: E501

        :param pgp_key_id: The pgp_key_id of this AttestationPgpSignedAttestation.  # noqa: E501
        :type: str
        """

        self._pgp_key_id = pgp_key_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(AttestationPgpSignedAttestation, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AttestationPgpSignedAttestation):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
