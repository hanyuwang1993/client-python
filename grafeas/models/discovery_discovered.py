# coding: utf-8

"""
    grafeas.proto

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: version not set
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class DiscoveryDiscovered(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'continuous_analysis': 'DiscoveredContinuousAnalysis',
        'last_analysis_time': 'datetime',
        'analysis_status': 'DiscoveredAnalysisStatus',
        'analysis_status_error': 'RpcStatus'
    }

    attribute_map = {
        'continuous_analysis': 'continuousAnalysis',
        'last_analysis_time': 'lastAnalysisTime',
        'analysis_status': 'analysisStatus',
        'analysis_status_error': 'analysisStatusError'
    }

    def __init__(self, continuous_analysis=None, last_analysis_time=None, analysis_status=None, analysis_status_error=None):  # noqa: E501
        """DiscoveryDiscovered - a model defined in Swagger"""  # noqa: E501

        self._continuous_analysis = None
        self._last_analysis_time = None
        self._analysis_status = None
        self._analysis_status_error = None
        self.discriminator = None

        if continuous_analysis is not None:
            self.continuous_analysis = continuous_analysis
        if last_analysis_time is not None:
            self.last_analysis_time = last_analysis_time
        if analysis_status is not None:
            self.analysis_status = analysis_status
        if analysis_status_error is not None:
            self.analysis_status_error = analysis_status_error

    @property
    def continuous_analysis(self):
        """Gets the continuous_analysis of this DiscoveryDiscovered.  # noqa: E501

        Whether the resource is continuously analyzed.  # noqa: E501

        :return: The continuous_analysis of this DiscoveryDiscovered.  # noqa: E501
        :rtype: DiscoveredContinuousAnalysis
        """
        return self._continuous_analysis

    @continuous_analysis.setter
    def continuous_analysis(self, continuous_analysis):
        """Sets the continuous_analysis of this DiscoveryDiscovered.

        Whether the resource is continuously analyzed.  # noqa: E501

        :param continuous_analysis: The continuous_analysis of this DiscoveryDiscovered.  # noqa: E501
        :type: DiscoveredContinuousAnalysis
        """

        self._continuous_analysis = continuous_analysis

    @property
    def last_analysis_time(self):
        """Gets the last_analysis_time of this DiscoveryDiscovered.  # noqa: E501

        The last time continuous analysis was done for this resource. Deprecated, do not use.  # noqa: E501

        :return: The last_analysis_time of this DiscoveryDiscovered.  # noqa: E501
        :rtype: datetime
        """
        return self._last_analysis_time

    @last_analysis_time.setter
    def last_analysis_time(self, last_analysis_time):
        """Sets the last_analysis_time of this DiscoveryDiscovered.

        The last time continuous analysis was done for this resource. Deprecated, do not use.  # noqa: E501

        :param last_analysis_time: The last_analysis_time of this DiscoveryDiscovered.  # noqa: E501
        :type: datetime
        """

        self._last_analysis_time = last_analysis_time

    @property
    def analysis_status(self):
        """Gets the analysis_status of this DiscoveryDiscovered.  # noqa: E501

        The status of discovery for the resource.  # noqa: E501

        :return: The analysis_status of this DiscoveryDiscovered.  # noqa: E501
        :rtype: DiscoveredAnalysisStatus
        """
        return self._analysis_status

    @analysis_status.setter
    def analysis_status(self, analysis_status):
        """Sets the analysis_status of this DiscoveryDiscovered.

        The status of discovery for the resource.  # noqa: E501

        :param analysis_status: The analysis_status of this DiscoveryDiscovered.  # noqa: E501
        :type: DiscoveredAnalysisStatus
        """

        self._analysis_status = analysis_status

    @property
    def analysis_status_error(self):
        """Gets the analysis_status_error of this DiscoveryDiscovered.  # noqa: E501

        When an error is encountered this will contain a LocalizedMessage under details to show to the user. The LocalizedMessage is output only and populated by the API.  # noqa: E501

        :return: The analysis_status_error of this DiscoveryDiscovered.  # noqa: E501
        :rtype: RpcStatus
        """
        return self._analysis_status_error

    @analysis_status_error.setter
    def analysis_status_error(self, analysis_status_error):
        """Sets the analysis_status_error of this DiscoveryDiscovered.

        When an error is encountered this will contain a LocalizedMessage under details to show to the user. The LocalizedMessage is output only and populated by the API.  # noqa: E501

        :param analysis_status_error: The analysis_status_error of this DiscoveryDiscovered.  # noqa: E501
        :type: RpcStatus
        """

        self._analysis_status_error = analysis_status_error

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(DiscoveryDiscovered, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DiscoveryDiscovered):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
