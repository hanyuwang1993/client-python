# coding: utf-8

"""
    grafeas.proto

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: version not set
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class SpdxFileOccurrence(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'license_concluded': 'SpdxLicense',
        'files_license_info': 'list[str]',
        'copyright': 'str',
        'comment': 'str',
        'notice': 'str',
        'contributors': 'list[str]',
        'attributions': 'list[str]'
    }

    attribute_map = {
        'id': 'id',
        'license_concluded': 'licenseConcluded',
        'files_license_info': 'filesLicenseInfo',
        'copyright': 'copyright',
        'comment': 'comment',
        'notice': 'notice',
        'contributors': 'contributors',
        'attributions': 'attributions'
    }

    def __init__(self, id=None, license_concluded=None, files_license_info=None, copyright=None, comment=None, notice=None, contributors=None, attributions=None):  # noqa: E501
        """SpdxFileOccurrence - a model defined in Swagger"""  # noqa: E501

        self._id = None
        self._license_concluded = None
        self._files_license_info = None
        self._copyright = None
        self._comment = None
        self._notice = None
        self._contributors = None
        self._attributions = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if license_concluded is not None:
            self.license_concluded = license_concluded
        if files_license_info is not None:
            self.files_license_info = files_license_info
        if copyright is not None:
            self.copyright = copyright
        if comment is not None:
            self.comment = comment
        if notice is not None:
            self.notice = notice
        if contributors is not None:
            self.contributors = contributors
        if attributions is not None:
            self.attributions = attributions

    @property
    def id(self):
        """Gets the id of this SpdxFileOccurrence.  # noqa: E501


        :return: The id of this SpdxFileOccurrence.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this SpdxFileOccurrence.


        :param id: The id of this SpdxFileOccurrence.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def license_concluded(self):
        """Gets the license_concluded of this SpdxFileOccurrence.  # noqa: E501


        :return: The license_concluded of this SpdxFileOccurrence.  # noqa: E501
        :rtype: SpdxLicense
        """
        return self._license_concluded

    @license_concluded.setter
    def license_concluded(self, license_concluded):
        """Sets the license_concluded of this SpdxFileOccurrence.


        :param license_concluded: The license_concluded of this SpdxFileOccurrence.  # noqa: E501
        :type: SpdxLicense
        """

        self._license_concluded = license_concluded

    @property
    def files_license_info(self):
        """Gets the files_license_info of this SpdxFileOccurrence.  # noqa: E501


        :return: The files_license_info of this SpdxFileOccurrence.  # noqa: E501
        :rtype: list[str]
        """
        return self._files_license_info

    @files_license_info.setter
    def files_license_info(self, files_license_info):
        """Sets the files_license_info of this SpdxFileOccurrence.


        :param files_license_info: The files_license_info of this SpdxFileOccurrence.  # noqa: E501
        :type: list[str]
        """

        self._files_license_info = files_license_info

    @property
    def copyright(self):
        """Gets the copyright of this SpdxFileOccurrence.  # noqa: E501


        :return: The copyright of this SpdxFileOccurrence.  # noqa: E501
        :rtype: str
        """
        return self._copyright

    @copyright.setter
    def copyright(self, copyright):
        """Sets the copyright of this SpdxFileOccurrence.


        :param copyright: The copyright of this SpdxFileOccurrence.  # noqa: E501
        :type: str
        """

        self._copyright = copyright

    @property
    def comment(self):
        """Gets the comment of this SpdxFileOccurrence.  # noqa: E501


        :return: The comment of this SpdxFileOccurrence.  # noqa: E501
        :rtype: str
        """
        return self._comment

    @comment.setter
    def comment(self, comment):
        """Sets the comment of this SpdxFileOccurrence.


        :param comment: The comment of this SpdxFileOccurrence.  # noqa: E501
        :type: str
        """

        self._comment = comment

    @property
    def notice(self):
        """Gets the notice of this SpdxFileOccurrence.  # noqa: E501


        :return: The notice of this SpdxFileOccurrence.  # noqa: E501
        :rtype: str
        """
        return self._notice

    @notice.setter
    def notice(self, notice):
        """Sets the notice of this SpdxFileOccurrence.


        :param notice: The notice of this SpdxFileOccurrence.  # noqa: E501
        :type: str
        """

        self._notice = notice

    @property
    def contributors(self):
        """Gets the contributors of this SpdxFileOccurrence.  # noqa: E501


        :return: The contributors of this SpdxFileOccurrence.  # noqa: E501
        :rtype: list[str]
        """
        return self._contributors

    @contributors.setter
    def contributors(self, contributors):
        """Sets the contributors of this SpdxFileOccurrence.


        :param contributors: The contributors of this SpdxFileOccurrence.  # noqa: E501
        :type: list[str]
        """

        self._contributors = contributors

    @property
    def attributions(self):
        """Gets the attributions of this SpdxFileOccurrence.  # noqa: E501


        :return: The attributions of this SpdxFileOccurrence.  # noqa: E501
        :rtype: list[str]
        """
        return self._attributions

    @attributions.setter
    def attributions(self, attributions):
        """Sets the attributions of this SpdxFileOccurrence.


        :param attributions: The attributions of this SpdxFileOccurrence.  # noqa: E501
        :type: list[str]
        """

        self._attributions = attributions

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(SpdxFileOccurrence, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SpdxFileOccurrence):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
