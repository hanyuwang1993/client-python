# coding: utf-8

"""
    grafeas.proto

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: version not set
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class SpdxDocumentOccurrence(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'title': 'str',
        'namespace': 'str',
        'external_document_refs': 'list[str]',
        'license_list_version': 'str',
        'creators': 'list[str]',
        'create_time': 'datetime',
        'creator_comment': 'str',
        'document_comment': 'str'
    }

    attribute_map = {
        'id': 'id',
        'title': 'title',
        'namespace': 'namespace',
        'external_document_refs': 'externalDocumentRefs',
        'license_list_version': 'licenseListVersion',
        'creators': 'creators',
        'create_time': 'createTime',
        'creator_comment': 'creatorComment',
        'document_comment': 'documentComment'
    }

    def __init__(self, id=None, title=None, namespace=None, external_document_refs=None, license_list_version=None, creators=None, create_time=None, creator_comment=None, document_comment=None):  # noqa: E501
        """SpdxDocumentOccurrence - a model defined in Swagger"""  # noqa: E501

        self._id = None
        self._title = None
        self._namespace = None
        self._external_document_refs = None
        self._license_list_version = None
        self._creators = None
        self._create_time = None
        self._creator_comment = None
        self._document_comment = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if title is not None:
            self.title = title
        if namespace is not None:
            self.namespace = namespace
        if external_document_refs is not None:
            self.external_document_refs = external_document_refs
        if license_list_version is not None:
            self.license_list_version = license_list_version
        if creators is not None:
            self.creators = creators
        if create_time is not None:
            self.create_time = create_time
        if creator_comment is not None:
            self.creator_comment = creator_comment
        if document_comment is not None:
            self.document_comment = document_comment

    @property
    def id(self):
        """Gets the id of this SpdxDocumentOccurrence.  # noqa: E501


        :return: The id of this SpdxDocumentOccurrence.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this SpdxDocumentOccurrence.


        :param id: The id of this SpdxDocumentOccurrence.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def title(self):
        """Gets the title of this SpdxDocumentOccurrence.  # noqa: E501


        :return: The title of this SpdxDocumentOccurrence.  # noqa: E501
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this SpdxDocumentOccurrence.


        :param title: The title of this SpdxDocumentOccurrence.  # noqa: E501
        :type: str
        """

        self._title = title

    @property
    def namespace(self):
        """Gets the namespace of this SpdxDocumentOccurrence.  # noqa: E501


        :return: The namespace of this SpdxDocumentOccurrence.  # noqa: E501
        :rtype: str
        """
        return self._namespace

    @namespace.setter
    def namespace(self, namespace):
        """Sets the namespace of this SpdxDocumentOccurrence.


        :param namespace: The namespace of this SpdxDocumentOccurrence.  # noqa: E501
        :type: str
        """

        self._namespace = namespace

    @property
    def external_document_refs(self):
        """Gets the external_document_refs of this SpdxDocumentOccurrence.  # noqa: E501


        :return: The external_document_refs of this SpdxDocumentOccurrence.  # noqa: E501
        :rtype: list[str]
        """
        return self._external_document_refs

    @external_document_refs.setter
    def external_document_refs(self, external_document_refs):
        """Sets the external_document_refs of this SpdxDocumentOccurrence.


        :param external_document_refs: The external_document_refs of this SpdxDocumentOccurrence.  # noqa: E501
        :type: list[str]
        """

        self._external_document_refs = external_document_refs

    @property
    def license_list_version(self):
        """Gets the license_list_version of this SpdxDocumentOccurrence.  # noqa: E501


        :return: The license_list_version of this SpdxDocumentOccurrence.  # noqa: E501
        :rtype: str
        """
        return self._license_list_version

    @license_list_version.setter
    def license_list_version(self, license_list_version):
        """Sets the license_list_version of this SpdxDocumentOccurrence.


        :param license_list_version: The license_list_version of this SpdxDocumentOccurrence.  # noqa: E501
        :type: str
        """

        self._license_list_version = license_list_version

    @property
    def creators(self):
        """Gets the creators of this SpdxDocumentOccurrence.  # noqa: E501


        :return: The creators of this SpdxDocumentOccurrence.  # noqa: E501
        :rtype: list[str]
        """
        return self._creators

    @creators.setter
    def creators(self, creators):
        """Sets the creators of this SpdxDocumentOccurrence.


        :param creators: The creators of this SpdxDocumentOccurrence.  # noqa: E501
        :type: list[str]
        """

        self._creators = creators

    @property
    def create_time(self):
        """Gets the create_time of this SpdxDocumentOccurrence.  # noqa: E501


        :return: The create_time of this SpdxDocumentOccurrence.  # noqa: E501
        :rtype: datetime
        """
        return self._create_time

    @create_time.setter
    def create_time(self, create_time):
        """Sets the create_time of this SpdxDocumentOccurrence.


        :param create_time: The create_time of this SpdxDocumentOccurrence.  # noqa: E501
        :type: datetime
        """

        self._create_time = create_time

    @property
    def creator_comment(self):
        """Gets the creator_comment of this SpdxDocumentOccurrence.  # noqa: E501


        :return: The creator_comment of this SpdxDocumentOccurrence.  # noqa: E501
        :rtype: str
        """
        return self._creator_comment

    @creator_comment.setter
    def creator_comment(self, creator_comment):
        """Sets the creator_comment of this SpdxDocumentOccurrence.


        :param creator_comment: The creator_comment of this SpdxDocumentOccurrence.  # noqa: E501
        :type: str
        """

        self._creator_comment = creator_comment

    @property
    def document_comment(self):
        """Gets the document_comment of this SpdxDocumentOccurrence.  # noqa: E501


        :return: The document_comment of this SpdxDocumentOccurrence.  # noqa: E501
        :rtype: str
        """
        return self._document_comment

    @document_comment.setter
    def document_comment(self, document_comment):
        """Sets the document_comment of this SpdxDocumentOccurrence.


        :param document_comment: The document_comment of this SpdxDocumentOccurrence.  # noqa: E501
        :type: str
        """

        self._document_comment = document_comment

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(SpdxDocumentOccurrence, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SpdxDocumentOccurrence):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
