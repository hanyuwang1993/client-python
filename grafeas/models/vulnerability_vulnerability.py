# coding: utf-8

"""
    grafeas.proto

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: version not set
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class VulnerabilityVulnerability(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'cvss_score': 'float',
        'severity': 'VulnerabilitySeverity',
        'details': 'list[VulnerabilityDetail]',
        'cvss_v3': 'VulnerabilityCVSS',
        'windows_details': 'list[VulnerabilityWindowsDetail]',
        'source_update_time': 'datetime',
        'cvss_v2': 'VulnerabilityCVSS',
        'cwe': 'list[str]'
    }

    attribute_map = {
        'cvss_score': 'cvssScore',
        'severity': 'severity',
        'details': 'details',
        'cvss_v3': 'cvssV3',
        'windows_details': 'windowsDetails',
        'source_update_time': 'sourceUpdateTime',
        'cvss_v2': 'cvssV2',
        'cwe': 'cwe'
    }

    def __init__(self, cvss_score=None, severity=None, details=None, cvss_v3=None, windows_details=None, source_update_time=None, cvss_v2=None, cwe=None):  # noqa: E501
        """VulnerabilityVulnerability - a model defined in Swagger"""  # noqa: E501

        self._cvss_score = None
        self._severity = None
        self._details = None
        self._cvss_v3 = None
        self._windows_details = None
        self._source_update_time = None
        self._cvss_v2 = None
        self._cwe = None
        self.discriminator = None

        if cvss_score is not None:
            self.cvss_score = cvss_score
        if severity is not None:
            self.severity = severity
        if details is not None:
            self.details = details
        if cvss_v3 is not None:
            self.cvss_v3 = cvss_v3
        if windows_details is not None:
            self.windows_details = windows_details
        if source_update_time is not None:
            self.source_update_time = source_update_time
        if cvss_v2 is not None:
            self.cvss_v2 = cvss_v2
        if cwe is not None:
            self.cwe = cwe

    @property
    def cvss_score(self):
        """Gets the cvss_score of this VulnerabilityVulnerability.  # noqa: E501

        The CVSS score for this vulnerability.  # noqa: E501

        :return: The cvss_score of this VulnerabilityVulnerability.  # noqa: E501
        :rtype: float
        """
        return self._cvss_score

    @cvss_score.setter
    def cvss_score(self, cvss_score):
        """Sets the cvss_score of this VulnerabilityVulnerability.

        The CVSS score for this vulnerability.  # noqa: E501

        :param cvss_score: The cvss_score of this VulnerabilityVulnerability.  # noqa: E501
        :type: float
        """

        self._cvss_score = cvss_score

    @property
    def severity(self):
        """Gets the severity of this VulnerabilityVulnerability.  # noqa: E501

        Note provider assigned impact of the vulnerability.  # noqa: E501

        :return: The severity of this VulnerabilityVulnerability.  # noqa: E501
        :rtype: VulnerabilitySeverity
        """
        return self._severity

    @severity.setter
    def severity(self, severity):
        """Sets the severity of this VulnerabilityVulnerability.

        Note provider assigned impact of the vulnerability.  # noqa: E501

        :param severity: The severity of this VulnerabilityVulnerability.  # noqa: E501
        :type: VulnerabilitySeverity
        """

        self._severity = severity

    @property
    def details(self):
        """Gets the details of this VulnerabilityVulnerability.  # noqa: E501

        All information about the package to specifically identify this vulnerability. One entry per (version range and cpe_uri) the package vulnerability has manifested in.  # noqa: E501

        :return: The details of this VulnerabilityVulnerability.  # noqa: E501
        :rtype: list[VulnerabilityDetail]
        """
        return self._details

    @details.setter
    def details(self, details):
        """Sets the details of this VulnerabilityVulnerability.

        All information about the package to specifically identify this vulnerability. One entry per (version range and cpe_uri) the package vulnerability has manifested in.  # noqa: E501

        :param details: The details of this VulnerabilityVulnerability.  # noqa: E501
        :type: list[VulnerabilityDetail]
        """

        self._details = details

    @property
    def cvss_v3(self):
        """Gets the cvss_v3 of this VulnerabilityVulnerability.  # noqa: E501

        The full description of the CVSS for version 3.  # noqa: E501

        :return: The cvss_v3 of this VulnerabilityVulnerability.  # noqa: E501
        :rtype: VulnerabilityCVSS
        """
        return self._cvss_v3

    @cvss_v3.setter
    def cvss_v3(self, cvss_v3):
        """Sets the cvss_v3 of this VulnerabilityVulnerability.

        The full description of the CVSS for version 3.  # noqa: E501

        :param cvss_v3: The cvss_v3 of this VulnerabilityVulnerability.  # noqa: E501
        :type: VulnerabilityCVSS
        """

        self._cvss_v3 = cvss_v3

    @property
    def windows_details(self):
        """Gets the windows_details of this VulnerabilityVulnerability.  # noqa: E501

        Windows details get their own format because the information format and model don't match a normal detail. Specifically Windows updates are done as patches, thus Windows vulnerabilities really are a missing package, rather than a package being at an incorrect version.  # noqa: E501

        :return: The windows_details of this VulnerabilityVulnerability.  # noqa: E501
        :rtype: list[VulnerabilityWindowsDetail]
        """
        return self._windows_details

    @windows_details.setter
    def windows_details(self, windows_details):
        """Sets the windows_details of this VulnerabilityVulnerability.

        Windows details get their own format because the information format and model don't match a normal detail. Specifically Windows updates are done as patches, thus Windows vulnerabilities really are a missing package, rather than a package being at an incorrect version.  # noqa: E501

        :param windows_details: The windows_details of this VulnerabilityVulnerability.  # noqa: E501
        :type: list[VulnerabilityWindowsDetail]
        """

        self._windows_details = windows_details

    @property
    def source_update_time(self):
        """Gets the source_update_time of this VulnerabilityVulnerability.  # noqa: E501

        The time this information was last changed at the source. This is an upstream timestamp from the underlying information source - e.g. Ubuntu security tracker.  # noqa: E501

        :return: The source_update_time of this VulnerabilityVulnerability.  # noqa: E501
        :rtype: datetime
        """
        return self._source_update_time

    @source_update_time.setter
    def source_update_time(self, source_update_time):
        """Sets the source_update_time of this VulnerabilityVulnerability.

        The time this information was last changed at the source. This is an upstream timestamp from the underlying information source - e.g. Ubuntu security tracker.  # noqa: E501

        :param source_update_time: The source_update_time of this VulnerabilityVulnerability.  # noqa: E501
        :type: datetime
        """

        self._source_update_time = source_update_time

    @property
    def cvss_v2(self):
        """Gets the cvss_v2 of this VulnerabilityVulnerability.  # noqa: E501

        The full description of the CVSS for version 2.  # noqa: E501

        :return: The cvss_v2 of this VulnerabilityVulnerability.  # noqa: E501
        :rtype: VulnerabilityCVSS
        """
        return self._cvss_v2

    @cvss_v2.setter
    def cvss_v2(self, cvss_v2):
        """Sets the cvss_v2 of this VulnerabilityVulnerability.

        The full description of the CVSS for version 2.  # noqa: E501

        :param cvss_v2: The cvss_v2 of this VulnerabilityVulnerability.  # noqa: E501
        :type: VulnerabilityCVSS
        """

        self._cvss_v2 = cvss_v2

    @property
    def cwe(self):
        """Gets the cwe of this VulnerabilityVulnerability.  # noqa: E501


        :return: The cwe of this VulnerabilityVulnerability.  # noqa: E501
        :rtype: list[str]
        """
        return self._cwe

    @cwe.setter
    def cwe(self, cwe):
        """Sets the cwe of this VulnerabilityVulnerability.


        :param cwe: The cwe of this VulnerabilityVulnerability.  # noqa: E501
        :type: list[str]
        """

        self._cwe = cwe

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(VulnerabilityVulnerability, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, VulnerabilityVulnerability):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
