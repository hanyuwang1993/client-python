# coding: utf-8

"""
    grafeas.proto

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: version not set
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class VulnerabilityOccurrencesSummaryFixableTotalByDigest(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'resource': 'V1beta1Resource',
        'severity': 'VulnerabilitySeverity',
        'fixable_count': 'str',
        'total_count': 'str'
    }

    attribute_map = {
        'resource': 'resource',
        'severity': 'severity',
        'fixable_count': 'fixableCount',
        'total_count': 'totalCount'
    }

    def __init__(self, resource=None, severity=None, fixable_count=None, total_count=None):  # noqa: E501
        """VulnerabilityOccurrencesSummaryFixableTotalByDigest - a model defined in Swagger"""  # noqa: E501

        self._resource = None
        self._severity = None
        self._fixable_count = None
        self._total_count = None
        self.discriminator = None

        if resource is not None:
            self.resource = resource
        if severity is not None:
            self.severity = severity
        if fixable_count is not None:
            self.fixable_count = fixable_count
        if total_count is not None:
            self.total_count = total_count

    @property
    def resource(self):
        """Gets the resource of this VulnerabilityOccurrencesSummaryFixableTotalByDigest.  # noqa: E501

        The affected resource.  # noqa: E501

        :return: The resource of this VulnerabilityOccurrencesSummaryFixableTotalByDigest.  # noqa: E501
        :rtype: V1beta1Resource
        """
        return self._resource

    @resource.setter
    def resource(self, resource):
        """Sets the resource of this VulnerabilityOccurrencesSummaryFixableTotalByDigest.

        The affected resource.  # noqa: E501

        :param resource: The resource of this VulnerabilityOccurrencesSummaryFixableTotalByDigest.  # noqa: E501
        :type: V1beta1Resource
        """

        self._resource = resource

    @property
    def severity(self):
        """Gets the severity of this VulnerabilityOccurrencesSummaryFixableTotalByDigest.  # noqa: E501

        The severity for this count. SEVERITY_UNSPECIFIED indicates total across all severities.  # noqa: E501

        :return: The severity of this VulnerabilityOccurrencesSummaryFixableTotalByDigest.  # noqa: E501
        :rtype: VulnerabilitySeverity
        """
        return self._severity

    @severity.setter
    def severity(self, severity):
        """Sets the severity of this VulnerabilityOccurrencesSummaryFixableTotalByDigest.

        The severity for this count. SEVERITY_UNSPECIFIED indicates total across all severities.  # noqa: E501

        :param severity: The severity of this VulnerabilityOccurrencesSummaryFixableTotalByDigest.  # noqa: E501
        :type: VulnerabilitySeverity
        """

        self._severity = severity

    @property
    def fixable_count(self):
        """Gets the fixable_count of this VulnerabilityOccurrencesSummaryFixableTotalByDigest.  # noqa: E501

        The number of fixable vulnerabilities associated with this resource.  # noqa: E501

        :return: The fixable_count of this VulnerabilityOccurrencesSummaryFixableTotalByDigest.  # noqa: E501
        :rtype: str
        """
        return self._fixable_count

    @fixable_count.setter
    def fixable_count(self, fixable_count):
        """Sets the fixable_count of this VulnerabilityOccurrencesSummaryFixableTotalByDigest.

        The number of fixable vulnerabilities associated with this resource.  # noqa: E501

        :param fixable_count: The fixable_count of this VulnerabilityOccurrencesSummaryFixableTotalByDigest.  # noqa: E501
        :type: str
        """

        self._fixable_count = fixable_count

    @property
    def total_count(self):
        """Gets the total_count of this VulnerabilityOccurrencesSummaryFixableTotalByDigest.  # noqa: E501

        The total number of vulnerabilities associated with this resource.  # noqa: E501

        :return: The total_count of this VulnerabilityOccurrencesSummaryFixableTotalByDigest.  # noqa: E501
        :rtype: str
        """
        return self._total_count

    @total_count.setter
    def total_count(self, total_count):
        """Sets the total_count of this VulnerabilityOccurrencesSummaryFixableTotalByDigest.

        The total number of vulnerabilities associated with this resource.  # noqa: E501

        :param total_count: The total_count of this VulnerabilityOccurrencesSummaryFixableTotalByDigest.  # noqa: E501
        :type: str
        """

        self._total_count = total_count

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(VulnerabilityOccurrencesSummaryFixableTotalByDigest, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, VulnerabilityOccurrencesSummaryFixableTotalByDigest):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
