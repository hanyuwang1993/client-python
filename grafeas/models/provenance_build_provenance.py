# coding: utf-8

"""
    grafeas.proto

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: version not set
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class ProvenanceBuildProvenance(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'project_id': 'str',
        'commands': 'list[ProvenanceCommand]',
        'built_artifacts': 'list[V1beta1provenanceArtifact]',
        'create_time': 'datetime',
        'start_time': 'datetime',
        'end_time': 'datetime',
        'creator': 'str',
        'logs_uri': 'str',
        'source_provenance': 'ProvenanceSource',
        'trigger_id': 'str',
        'build_options': 'dict(str, str)',
        'builder_version': 'str'
    }

    attribute_map = {
        'id': 'id',
        'project_id': 'projectId',
        'commands': 'commands',
        'built_artifacts': 'builtArtifacts',
        'create_time': 'createTime',
        'start_time': 'startTime',
        'end_time': 'endTime',
        'creator': 'creator',
        'logs_uri': 'logsUri',
        'source_provenance': 'sourceProvenance',
        'trigger_id': 'triggerId',
        'build_options': 'buildOptions',
        'builder_version': 'builderVersion'
    }

    def __init__(self, id=None, project_id=None, commands=None, built_artifacts=None, create_time=None, start_time=None, end_time=None, creator=None, logs_uri=None, source_provenance=None, trigger_id=None, build_options=None, builder_version=None):  # noqa: E501
        """ProvenanceBuildProvenance - a model defined in Swagger"""  # noqa: E501

        self._id = None
        self._project_id = None
        self._commands = None
        self._built_artifacts = None
        self._create_time = None
        self._start_time = None
        self._end_time = None
        self._creator = None
        self._logs_uri = None
        self._source_provenance = None
        self._trigger_id = None
        self._build_options = None
        self._builder_version = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if project_id is not None:
            self.project_id = project_id
        if commands is not None:
            self.commands = commands
        if built_artifacts is not None:
            self.built_artifacts = built_artifacts
        if create_time is not None:
            self.create_time = create_time
        if start_time is not None:
            self.start_time = start_time
        if end_time is not None:
            self.end_time = end_time
        if creator is not None:
            self.creator = creator
        if logs_uri is not None:
            self.logs_uri = logs_uri
        if source_provenance is not None:
            self.source_provenance = source_provenance
        if trigger_id is not None:
            self.trigger_id = trigger_id
        if build_options is not None:
            self.build_options = build_options
        if builder_version is not None:
            self.builder_version = builder_version

    @property
    def id(self):
        """Gets the id of this ProvenanceBuildProvenance.  # noqa: E501

        Required. Unique identifier of the build.  # noqa: E501

        :return: The id of this ProvenanceBuildProvenance.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ProvenanceBuildProvenance.

        Required. Unique identifier of the build.  # noqa: E501

        :param id: The id of this ProvenanceBuildProvenance.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def project_id(self):
        """Gets the project_id of this ProvenanceBuildProvenance.  # noqa: E501

        ID of the project.  # noqa: E501

        :return: The project_id of this ProvenanceBuildProvenance.  # noqa: E501
        :rtype: str
        """
        return self._project_id

    @project_id.setter
    def project_id(self, project_id):
        """Sets the project_id of this ProvenanceBuildProvenance.

        ID of the project.  # noqa: E501

        :param project_id: The project_id of this ProvenanceBuildProvenance.  # noqa: E501
        :type: str
        """

        self._project_id = project_id

    @property
    def commands(self):
        """Gets the commands of this ProvenanceBuildProvenance.  # noqa: E501

        Commands requested by the build.  # noqa: E501

        :return: The commands of this ProvenanceBuildProvenance.  # noqa: E501
        :rtype: list[ProvenanceCommand]
        """
        return self._commands

    @commands.setter
    def commands(self, commands):
        """Sets the commands of this ProvenanceBuildProvenance.

        Commands requested by the build.  # noqa: E501

        :param commands: The commands of this ProvenanceBuildProvenance.  # noqa: E501
        :type: list[ProvenanceCommand]
        """

        self._commands = commands

    @property
    def built_artifacts(self):
        """Gets the built_artifacts of this ProvenanceBuildProvenance.  # noqa: E501

        Output of the build.  # noqa: E501

        :return: The built_artifacts of this ProvenanceBuildProvenance.  # noqa: E501
        :rtype: list[V1beta1provenanceArtifact]
        """
        return self._built_artifacts

    @built_artifacts.setter
    def built_artifacts(self, built_artifacts):
        """Sets the built_artifacts of this ProvenanceBuildProvenance.

        Output of the build.  # noqa: E501

        :param built_artifacts: The built_artifacts of this ProvenanceBuildProvenance.  # noqa: E501
        :type: list[V1beta1provenanceArtifact]
        """

        self._built_artifacts = built_artifacts

    @property
    def create_time(self):
        """Gets the create_time of this ProvenanceBuildProvenance.  # noqa: E501

        Time at which the build was created.  # noqa: E501

        :return: The create_time of this ProvenanceBuildProvenance.  # noqa: E501
        :rtype: datetime
        """
        return self._create_time

    @create_time.setter
    def create_time(self, create_time):
        """Sets the create_time of this ProvenanceBuildProvenance.

        Time at which the build was created.  # noqa: E501

        :param create_time: The create_time of this ProvenanceBuildProvenance.  # noqa: E501
        :type: datetime
        """

        self._create_time = create_time

    @property
    def start_time(self):
        """Gets the start_time of this ProvenanceBuildProvenance.  # noqa: E501

        Time at which execution of the build was started.  # noqa: E501

        :return: The start_time of this ProvenanceBuildProvenance.  # noqa: E501
        :rtype: datetime
        """
        return self._start_time

    @start_time.setter
    def start_time(self, start_time):
        """Sets the start_time of this ProvenanceBuildProvenance.

        Time at which execution of the build was started.  # noqa: E501

        :param start_time: The start_time of this ProvenanceBuildProvenance.  # noqa: E501
        :type: datetime
        """

        self._start_time = start_time

    @property
    def end_time(self):
        """Gets the end_time of this ProvenanceBuildProvenance.  # noqa: E501

        Time at which execution of the build was finished.  # noqa: E501

        :return: The end_time of this ProvenanceBuildProvenance.  # noqa: E501
        :rtype: datetime
        """
        return self._end_time

    @end_time.setter
    def end_time(self, end_time):
        """Sets the end_time of this ProvenanceBuildProvenance.

        Time at which execution of the build was finished.  # noqa: E501

        :param end_time: The end_time of this ProvenanceBuildProvenance.  # noqa: E501
        :type: datetime
        """

        self._end_time = end_time

    @property
    def creator(self):
        """Gets the creator of this ProvenanceBuildProvenance.  # noqa: E501

        E-mail address of the user who initiated this build. Note that this was the user's e-mail address at the time the build was initiated; this address may not represent the same end-user for all time.  # noqa: E501

        :return: The creator of this ProvenanceBuildProvenance.  # noqa: E501
        :rtype: str
        """
        return self._creator

    @creator.setter
    def creator(self, creator):
        """Sets the creator of this ProvenanceBuildProvenance.

        E-mail address of the user who initiated this build. Note that this was the user's e-mail address at the time the build was initiated; this address may not represent the same end-user for all time.  # noqa: E501

        :param creator: The creator of this ProvenanceBuildProvenance.  # noqa: E501
        :type: str
        """

        self._creator = creator

    @property
    def logs_uri(self):
        """Gets the logs_uri of this ProvenanceBuildProvenance.  # noqa: E501

        URI where any logs for this provenance were written.  # noqa: E501

        :return: The logs_uri of this ProvenanceBuildProvenance.  # noqa: E501
        :rtype: str
        """
        return self._logs_uri

    @logs_uri.setter
    def logs_uri(self, logs_uri):
        """Sets the logs_uri of this ProvenanceBuildProvenance.

        URI where any logs for this provenance were written.  # noqa: E501

        :param logs_uri: The logs_uri of this ProvenanceBuildProvenance.  # noqa: E501
        :type: str
        """

        self._logs_uri = logs_uri

    @property
    def source_provenance(self):
        """Gets the source_provenance of this ProvenanceBuildProvenance.  # noqa: E501

        Details of the Source input to the build.  # noqa: E501

        :return: The source_provenance of this ProvenanceBuildProvenance.  # noqa: E501
        :rtype: ProvenanceSource
        """
        return self._source_provenance

    @source_provenance.setter
    def source_provenance(self, source_provenance):
        """Sets the source_provenance of this ProvenanceBuildProvenance.

        Details of the Source input to the build.  # noqa: E501

        :param source_provenance: The source_provenance of this ProvenanceBuildProvenance.  # noqa: E501
        :type: ProvenanceSource
        """

        self._source_provenance = source_provenance

    @property
    def trigger_id(self):
        """Gets the trigger_id of this ProvenanceBuildProvenance.  # noqa: E501

        Trigger identifier if the build was triggered automatically; empty if not.  # noqa: E501

        :return: The trigger_id of this ProvenanceBuildProvenance.  # noqa: E501
        :rtype: str
        """
        return self._trigger_id

    @trigger_id.setter
    def trigger_id(self, trigger_id):
        """Sets the trigger_id of this ProvenanceBuildProvenance.

        Trigger identifier if the build was triggered automatically; empty if not.  # noqa: E501

        :param trigger_id: The trigger_id of this ProvenanceBuildProvenance.  # noqa: E501
        :type: str
        """

        self._trigger_id = trigger_id

    @property
    def build_options(self):
        """Gets the build_options of this ProvenanceBuildProvenance.  # noqa: E501

        Special options applied to this build. This is a catch-all field where build providers can enter any desired additional details.  # noqa: E501

        :return: The build_options of this ProvenanceBuildProvenance.  # noqa: E501
        :rtype: dict(str, str)
        """
        return self._build_options

    @build_options.setter
    def build_options(self, build_options):
        """Sets the build_options of this ProvenanceBuildProvenance.

        Special options applied to this build. This is a catch-all field where build providers can enter any desired additional details.  # noqa: E501

        :param build_options: The build_options of this ProvenanceBuildProvenance.  # noqa: E501
        :type: dict(str, str)
        """

        self._build_options = build_options

    @property
    def builder_version(self):
        """Gets the builder_version of this ProvenanceBuildProvenance.  # noqa: E501

        Version string of the builder at the time this build was executed.  # noqa: E501

        :return: The builder_version of this ProvenanceBuildProvenance.  # noqa: E501
        :rtype: str
        """
        return self._builder_version

    @builder_version.setter
    def builder_version(self, builder_version):
        """Sets the builder_version of this ProvenanceBuildProvenance.

        Version string of the builder at the time this build was executed.  # noqa: E501

        :param builder_version: The builder_version of this ProvenanceBuildProvenance.  # noqa: E501
        :type: str
        """

        self._builder_version = builder_version

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ProvenanceBuildProvenance, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ProvenanceBuildProvenance):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
